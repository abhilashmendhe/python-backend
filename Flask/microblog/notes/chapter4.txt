Chapter 4 : Databases

- We will use flask SQLAlchemy which is an ORM. ORM allows applications to manage database using high-level entities such as classes, objects and methods instead 
of tables and SQL.

- We will also use migrate(alembic) package. This package helps to make an update in our database that have a modified structure of a table.

- We are using sqlalchemy module which includes general purpose database functions and classes such as types and query building helpers. 
- Another module is sqlalchemy.orm provides the support for using models.

- Creating migration repository 
  a) run `flask db init`
  After running this command, you will find a new migrations directory, with a few files and a versions subdirectory inside. 
  All these files should be treated as part of your project from now on, and in particular, should be added to source control along with your application code.

- Creating First Database Migration
  a) run `flask db migrate -m "users table"`
  -m option tells to add a short desc. about the table

  You will find that it has two functions called upgrade() and downgrade(). 
  The upgrade() function applies the migration, and the downgrade() function removes it. 
  This allows Alembic to migrate the database to any point in the history, even to older versions, by using the downgrade path.

